program = [ chunk ];

chunk := { statement };

statement = variable_definition | function_definition;

variable_definition = 'let' identifier '=' expression;

function_definition = 'let' identifier '(' [ identifier { ',' identifier } ] ')' '=' expression;

expression = additive_expression;

additive_expression = [ additive_expression ('+' | '-') ] multiplicative_expression;

multiplicative_expression = [ multiplicative_expression ('*' | '/' | '%') ] unary_expression;

unary_expression = [ '-' ] primary_expression;

primary_expression = identifier | integer | '(' expression ')' | call_expression;

call_expression = identifier '(' [ expression { ',' expression } ] ')';

identifier = (* Implementation Defined *)

integer = (* Implementation Defined *)
